Voc√™ acaba de ser contratado por uma big tech company dos EUA (finalmente todo aquele esfor√ßo na UFABC foi recompensadoüí∞). Essa big tech company √© uma grande empresa de e-commerce e vende praticamente de tudo. Por causa disso, ela possui enormes armaz√©ns cheios de produtos. Como √© de se esperar de big tech companies, tudo √© otimizado e usa-se tecnologia para automatizar quase tudo. Ent√£o, n√£o √© de se estranhar que, ao inv√©s de funcion√°rios, essa empresa tenha rob√¥s aut√¥nomos para carregar as mercadorias dentro dos armaz√©ns.

Os armaz√©ns, como voc√™ deve imaginar, s√£o repletos de prateleiras enormes separadas por corredores. Cada rob√¥ carrega em sua mem√≥ria uma lista com todos os corredores do armaz√©m no qual trabalha, al√©m dos comprimentos destes. Al√©m disso, cada rob√¥ conhece o ponto de entrada e sa√≠da de cada corredor ‚Äì como alguns corredores dos armaz√©ns s√£o muito estreitos, esses corredores funcionam como vias de m√£o √∫nica nas quais os rob√¥s s√≥ podem trafegar em um sentido. Assim, um rob√¥ s√≥ pode entrar e sair de um corredor, respectivamente, pelo ponto de entrada e sa√≠da deste.

Sua primeira tarefa √© reescrever o programa que o rob√¥ usa para calcular a menor rota entre dois pontos dentro do armaz√©m.

Crit√©rios importantes
Independentemente dos resultados dos testes, o n√£o cumprimento dos crit√©rios abaixo implicar√° em nota zero para esta atividade. Qualquer d√∫vida, entre em contato.

As √∫nicas estruturas de dados que voc√™ poder√° usar da biblioteca padr√£o s√£o: vetores/matrizes (est√°ticos e/ou din√¢micos), listas, pilhas, strings, hashs/dicion√°rios/maps.
Se voc√™ precisar, voc√™ pode usar uma rotina de ordena√ß√£o fornecida pela sua linguagem.
Se voc√™ precisar usar uma fila de prioridades, ent√£o voc√™ dever√° implementar a sua pr√≥pria fila.
O tempo de execu√ß√£o do seu algoritmo deve ser O((n‚ÄÖ+‚ÄÖm) lg n), onde n √© o n√∫mero de pontos e m √© o n√∫mero de corredores.
Entrada
A entrada para o seu programa consiste da lista de corredores do armaz√©m no qual um dado rob√¥ trabalha, do ponto atual do rob√¥ (sua origem) e o ponto no qual o rob√¥ deve ir (seu destino). Mais especificamente, a primeira linha da entrada consiste de um inteiro n, 1 <= n <= 100000, que representa o n√∫mero de pontos de entrada/sa√≠da. A segunda linha da entrada consiste de um inteiro m, 0 <= m <= n (n - 1), que representa o n√∫mero de corredores do armaz√©m. Cada uma das pr√≥ximas m linhas consiste de tr√™s n√∫meros x y w, onde x e y s√£o inteiros tais que 0 <= x, y < n e w √© um n√∫mero real tal que 0 <= w <= 999, representando um corredor com ponto de entrada em x, ponto de sa√≠da em y e comprimento w. Por fim, temos uma linha contendo dois inteiros o d, 0 <= o, d < n, onde o √© o ponto de origem do rob√¥ e d o ponto de destino.

Sa√≠da
A sa√≠da do seu programa deve consistir de um √∫nico n√∫mero (com quatro casas decimais de precis√£o) representando o comprimento do menor trajeto do ponto de origem o ao ponto de destino d, se tal trajeto existir. Acontece que as vezes a mem√≥ria de um rob√¥ se corrompe, fazendo com que ele se ‚Äúesque√ßa‚Äù de alguns corredores. Afinal, os grandes engenheiros da Ama dessa grande empresa n√£o projetariam as vias de um armaz√©m de forma que fosse imposs√≠vel para um rob√¥ ir de um ponto o a um ponto d. Assim, caso n√£o haja um trajeto do ponto o ao ponto d, o seu programa deve imprimir a mensagem ‚ÄúERRO: 3.1415‚Äù.

Exemplos
Teste 01

Entrada:

5
9
0 3 9.0690
0 4 29.0608
1 2 0.5465
2 1 75.4759
2 4 0.2178
3 1 58.2781
3 2 0.5346
3 4 987.8134
4 0 0.4844
2 1
Sa√≠da:

68.0493
Teste 02

Entrada:

5
9
0 3 0.5429
0 4 16.2579
2 0 2.3740
2 3 0.9571
3 1 428.1844
3 4 0.3195
4 0 5.8892
4 1 0.2138
4 3 448.0224
2 0
Sa√≠da:

2.3740